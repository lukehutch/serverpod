import 'package:postgres/postgres.dart';

/// Exception thrown when an error occurs during a database operation.
class DatabaseException implements Exception {
  /// A message indicating the error.
  final String message;

  // The following fields are copied from ServerException, which is a
  // subclass of PgException

  /// The severity of the exception.
  final Severity? severity;

  /// An index into an executed query string where an error occurred, if by provided by the database.
  final int? position;

  /// An index into a query string generated by the database, if provided.
  final int? internalPosition;

  final int? lineNumber;

  /// The PostgreSQL error code.
  ///
  /// May be null if the exception was not generated by the database.
  final String? code;

  /// Additional details if provided by the database.
  final String? detail;

  /// A hint on how to remedy an error, if provided by the database.
  final String? hint;

  final String? internalQuery;
  final String? trace;

  final String? schemaName;
  final String? tableName;
  final String? columnName;
  final String? dataTypeName;
  final String? constraintName;
  final String? fileName;
  final String? routineName;

  /// Creates a new [DatabaseException].
  DatabaseException(this.message)
      : severity = Severity.error,
        position = null,
        internalPosition = null,
        lineNumber = null,
        code = null,
        detail = null,
        hint = null,
        internalQuery = null,
        trace = null,
        schemaName = null,
        tableName = null,
        columnName = null,
        dataTypeName = null,
        constraintName = null,
        fileName = null,
        routineName = null;

  /// Creates a new [DatabaseException] from a [PgException].
  DatabaseException.fromServerException(ServerException e)
      : message = e.message,
        severity = e.severity,
        position = e.position,
        internalPosition = e.internalPosition,
        lineNumber = e.lineNumber,
        code = e.code,
        detail = e.detail,
        hint = e.hint,
        internalQuery = e.internalQuery,
        trace = e.trace,
        schemaName = e.schemaName,
        tableName = e.tableName,
        columnName = e.columnName,
        dataTypeName = e.dataTypeName,
        constraintName = e.constraintName,
        fileName = e.fileName,
        routineName = e.routineName;

  @override
  String toString() {
    return 'DatabaseException: $message';
  }
}

/// Exception thrown when no row is inserted when inserting a row.
class DatabaseInsertRowException extends DatabaseException {
  /// Creates a new [DatabaseInsertRowException].
  DatabaseInsertRowException(super.message);
}

/// Exception thrown when no rows is updated when updating a row.
class DatabaseUpdateRowException extends DatabaseException {
  /// Creates a new [DatabaseUpdateRowException].
  DatabaseUpdateRowException(super.message);
}

/// Exception thrown when no rows is deleted when deleting a row.
class DatabaseDeleteRowException extends DatabaseException {
  /// Creates a new [DatabaseDeleteRowException].
  DatabaseDeleteRowException(super.message);
}
